/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/nodeinfo/2.0.json/": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": {
              version: string;
              software: {
                name: string;
                version: string;
                homepage: string;
              };
              protocols: string[];
              openRegistrations: boolean;
              metadata: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/auth/register": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            username: string;
            password: string;
            email?: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": {
              token: string;
            };
          };
        };
      };
    };
  };
  "/auth/login": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            username: string;
            password: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": {
              token: string;
              user: components["schemas"]["PublicUser"];
            };
          };
        };
      };
    };
  };
  "/users/@me/": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PrivateUser"];
          };
        };
      };
    };
    patch: {
      requestBody?: {
        content: {
          "application/json": {
            display_name?: string;
            summary?: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/users/@me/channels/": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PublicChannel"][];
          };
        };
      };
    };
  };
  "/users/{user_id}/": {
    get: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PublicUser"];
          };
        };
      };
    };
  };
  "/users/{user_id}/channels/": {
    post: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PublicChannel"];
          };
        };
      };
    };
  };
  "/users/{user_id}/relationship/": {
    get: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PrivateRelationship"];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            type: "blocked" | "pending";
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PrivateRelationship"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/channel/{channel_id}/": {
    get: {
      parameters: {
        path: {
          channel_id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    patch: {
      parameters: {
        path: {
          channel_id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/channel/{channel_id}/messages/": {
    get: {
      parameters: {
        path: {
          channel_id: string;
          limit: number;
          after: string;
          before: string;
          around: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PublicMessage"][];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          channel_id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            content: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PublicMessage"];
          };
        };
      };
    };
  };
  "/channel/{channel_id}/messages/{message_id}/": {
    get: {
      parameters: {
        path: {
          channel_id: string;
          message_id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PublicMessage"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PublicUser: {
      name: string;
      summary: string;
      display_name: string;
      domain: string;
    };
    PrivateUser: components["schemas"]["PublicUser"] & {
      email: string;
    };
    PublicChannel: {
      id: string;
      name: string;
      domain: string;
    };
    PrivateRelationship: {
      created: string;
      from_id: string;
      to_id: string;
      type: number;
    };
    PublicMessage: {
      id: string;
      content: string;
      published: string;
      updated: string;
      author_id: string;
      channel_id: string;
    };
  };
  responses: never;
  parameters: {
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
