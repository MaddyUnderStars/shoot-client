/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

import type { ActorMention } from "@/lib/client/common/actor";

export interface paths {
	"/upload/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: {
			parameters: {
				query: {
					t: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/register": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						username: string;
						password: string;
						email?: string;
						/** @description Instance registration invite */
						invite?: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							token: string;
						};
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						username: string;
						password: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							token: string;
							user: components["schemas"]["PublicUser"];
						};
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/invite/{invite_code}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					invite_code: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					invite_code: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/@me/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PrivateUser"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						display_name?: string;
						summary?: string;
						current_password?: string;
						password?: string;
						/** Format: email */
						email?: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		trace?: never;
	};
	"/users/@me/guild/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicGuild"][];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/@me/guild/{guild_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					guild_id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/@me/channels/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicChannel"][];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/{user_id}/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					user_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicUser"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/{user_id}/channels/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					user_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						name: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicChannel"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/{user_id}/relationship/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					user_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PrivateRelationship"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					user_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						type?: "blocked" | "pending";
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PrivateRelationship"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					user_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/guild/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						name: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicGuild"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/guild/{guild_id}/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					guild_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicGuild"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					guild_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		options?: never;
		head?: never;
		patch: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					guild_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						name?: string;
						summary?: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		trace?: never;
	};
	"/guild/{guild_id}/invite": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					guild_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						/** Format: date-time */
						expiry?: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							code: string;
							guild: components["schemas"]["ActorMention"];
							expires: string;
						};
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/guild/{guild_id}/channel/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					guild_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						name: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicGuildTextChannel"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/channel/{channel_id}/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json":
							| components["schemas"]["PublicGuildTextChannel"]
							| components["schemas"]["PublicDmChannel"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		options?: never;
		head?: never;
		patch: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						name: string;
					};
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		trace?: never;
	};
	"/channel/{channel_id}/messages/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					limit?: number;
					order?: "ASC" | "DESC";
					after?: string;
					before?: string;
					around?: string;
					query?: string;
				};
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicMessage"][];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": components["schemas"]["MessageCreateRequest"];
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicMessage"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/channel/{channel_id}/call/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							token: string;
							ip: string;
						};
					};
				};
				202: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": "Accepted";
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/channel/{channel_id}/attachments/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					"application/json": {
						/** @description Client defined ID for cross referencing attachments to output endpoints. Can be any value. Must be unique */
						id: string;
						/** @description User defined file name */
						name: string;
						md5: string;
						mime: string;
						/** @description Size in bytes */
						size: number;
						width?: number;
						height?: number;
					}[];
				};
			};
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							id: string;
							hash: string;
							url: string;
						}[];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/channel/{channel_id}/attachments/{hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					hash: string;
					channel_id: components["schemas"]["ActorMention"];
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/channel/{channel_id}/messages/{message_id}/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
					message_id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PublicMessage"];
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		put?: never;
		post?: never;
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					channel_id: components["schemas"]["ActorMention"];
					message_id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": Record<string, never>;
					};
				};
				400: components["responses"]["BadRequest"];
				401: components["responses"]["Unauthorised"];
				404: components["responses"]["NotFound"];
				500: components["responses"]["InternalServerError"];
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		HttpError: {
			message: string;
			code: number;
			detail?: {
				body?: {
					message: string;
					code: string;
					path: string[];
				}[];
				param?: {
					message: string;
					code: string;
					path: string[];
				}[];
				query?: {
					message: string;
					code: string;
					path: string[];
				}[];
			};
		};
		ActorMention: ActorMention;
		PublicUser: {
			mention: components["schemas"]["ActorMention"];
			name: string;
			summary: string;
			display_name: string;
		};
		PrivateUser: components["schemas"]["PublicUser"] & {
			email: string;
		};
		PublicChannel: {
			mention: components["schemas"]["ActorMention"];
			name: string;
		};
		PublicGuildTextChannel: components["schemas"]["PublicChannel"] & {
			guild?: components["schemas"]["ActorMention"];
		};
		PublicRole: {
			/** Format: uuid */
			id: string;
			name: string;
			allow: number[];
			deny: number[];
			guild: components["schemas"]["ActorMention"];
		};
		PublicGuild: {
			mention: components["schemas"]["ActorMention"];
			name: string;
			channels?: components["schemas"]["PublicGuildTextChannel"][];
			roles?: components["schemas"]["PublicRole"][];
		};
		PrivateRelationship: {
			created: string;
			user: components["schemas"]["PublicUser"];
			/** @enum {integer} */
			type: 0 | 1 | 2;
		};
		PublicDmChannel: components["schemas"]["PublicChannel"] & {
			owner: components["schemas"]["ActorMention"];
			recipients: components["schemas"]["ActorMention"][];
		};
		PublicAttachment: {
			name: string;
			hash: string;
			type: string;
			size: number;
			width?: number | null;
			height?: number | null;
		};
		PublicMessage: {
			/** Format: uuid */
			id: string;
			content: string;
			published: string;
			updated: string;
			author_id: components["schemas"]["ActorMention"];
			channel_id: components["schemas"]["ActorMention"];
			files: components["schemas"]["PublicAttachment"][];
		};
		MessageCreateRequest: {
			content?: string;
			files?: {
				name: string;
				hash: string;
			}[];
		};
	};
	responses: {
		/** @description Bad request */
		BadRequest: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": components["schemas"]["HttpError"];
			};
		};
		/** @description The requested resource was not found */
		NotFound: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": components["schemas"]["HttpError"];
			};
		};
		/** @description Unauthorised */
		Unauthorised: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": components["schemas"]["HttpError"];
			};
		};
		/** @description Internal server error */
		InternalServerError: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": components["schemas"]["HttpError"];
			};
		};
	};
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
